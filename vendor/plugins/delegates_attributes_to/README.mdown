# Delegate Attributes

Association attributes delegator plugin. It delegates association attributes accessors to a model. It also supports ActiveRecord::Dirty check, multiparamenter attributes (1i, 2i, 3i) assigning, auto saving for delegated attributes (see below).

## Usage

    class User
      belongs_to :contact
      # it delegates all association attribute accessors to :contact 
      # except service attributes like created_at, updated_at, etc.
      delegate_attributes :to => :contact
      
      has_one :profile
      # it delegates only :about, :hobby attribute accessors to :profile
      delegate_attributes :about, :hobby, :to => :profile
    end


### Special service attributed are not delegated

Attributes like _id_, _created\_at_, _updated\_at_, _type_, etc are ignored by default.
You can specify which attributes are ignored by changing class inheritable accessor __default\_rejected\_delegate\_columns__ for each class

    class Person
      default_rejected_delegate_columns << [:commentable_id, :commentable_type]
      ...
    end

### Autosave for delegated attributes

When ActiveRecord saves a main model it doesn't save associated models by default (unless both are new records). This is not desired behavior for delegated attributes. They should behave like other native attributes in the model. For this reason __::delegates\_attributes\_to__ adds to association reflection _:autosave_ option and sets it to true unless the reflection has _:autosave_ option already. So if you do not want to autosave delegated attributes for some reason, just add _:autosave => false_ to your reflection explicitly and __::delegates\_attributes\_to__ won't change it.

__Important__. Side effect for that behavior is that it also saves not delegated attributes of the associated model.

### Dirty check changes are tracked for delegated attributes

When association attribute is modified an association model becomes dirty but it takes no effect on a main model. It doesn't become dirty. To be more like native attributes this behavior was changed for delegated attributes. All changes are tracked even if association attributes were changed directly in association.

__Important__. It tracks for changes only chosen delegated attributes and do not track others.


    class User
    
      belongs_to :contact
      delegate_attributes :to => :contact
    
      has_one :profile
      delegate_attribute :about, :to => :profile
      ...
    end

    u = User.first

    u.firstname               # => "Jonh"
    u.firstname_changed?      # => false
    u.changed?                # => false
    u.firstname = 'Bob'       
    u.firstname               # => "Bob"
    u.firstname_was           # => "Jonh"
    u.firstname_changed?      # => true
    u.changed?                # => true
    u.contact.changed?        # => true

    # it also tracks changes even if association attribute was changed directly
    u = User.last

    u.changed?                # => false
    u.profile.about = "Bob"
    u.changed?                # => true

    u = User.last

    u.changed?                # => false
    u.about = "Bob"
    u.changed?                # => true
    u.profile.changed?        # => true
    
    # it doesn't track chages to non delegated attribute
    u = User.last

    u.changed?                # => false
    u.profile.hobby = "Basketball"
    u.changed?                # => false
    u.profile.changed?        # => true

### Multiparameter attributes assigning

Multiparameter attributes that need more than one constructor parameter also can be assigned.
More frequently example is saving a form with multi select date/time attribute through 
[\#date\_select](http://apidock.com/rails/ActionView/Helpers/DateHelper/date_select) helper.
(It produces params like 'written\_on(1i)'='2010', 'written\_on(2i)'='3', 'written\_on(3i)'='7')
Any attribute which is built through [composed\_of](http://apidock.com/rails/ActiveRecord/Aggregations/ClassMethods/composed_of)
also can be delegated.

### It is backward compatible with David Faber's delegate\_belong\_to

[Original idea](http://www.kellerandfaber.com/writing/delegate_belongs_to-delegating-to-associations-in-rails) belongs to David Faber. Project was forked from Faber's [delegate\_belongs\_to](http://github.com/faber/delegate_belongs_to) repo, refactored and significally improved. Also __::delegate\_has\_one__ method was implemented.

### Copyright

Copiright &copy; 2010 Pavel Gorbokon, released under the MIT license.